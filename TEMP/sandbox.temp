//sandbox.cpp
struct bot_config;

int check_deadlock(vector<bot_config> &bots, int index);
bool check_collision_possibility(AprilInterfaceAndVideoCapture &testbed, vector<PathPlannerGrid> &planners, vector<bot_config> &bots, pair<int,int> &wheel_velocities, int i);
void getSimulatioResults(int number_of_maps, int number_of_trials, int number_of_algos);
void getSimulatioResults2(int number_of_maps, int number_of_trials, int number_of_algos);


int main(int argc, char* argv[]) {
  bool get_results = false;
 //get_results = false;
  if(get_results)
  {
  	//getSimulatioResults(1, 20, 5);//number of maps, trials, algos
  	getSimulatioResults2(1, 20, 5);
  	return 0;
  }
  AprilInterfaceAndVideoCapture testbed;  
  int frame = 0;
  int first_iter = 1;
  double last_t = tic();
  const char *windowName = "Arena";
  cv::namedWindow(windowName,WINDOW_NORMAL);
 
  cv::Mat image;
  cv::Mat image_gray;
  
  //image = imread("../Maps/Basic.png");
  //cvtColor(image, image_gray, cv::COLOR_BGR2GRAY);

  int robotCount = 4;  
  cout<<"Enter the number of robots: ";
  cin>>robotCount;
  
  //tag id should also not go beyond max_robots
 /* vector<vector<nd>> tp;//a map that would be shared among all
  vector<bot_config> bots(robotCount,bot_config(10, 10,130,tp));
  vector<PathPlannerGrid> planners(robotCount,PathPlannerGrid(tp));
*/


  vector <vector<vector<nd>>> tp(robotCount);
  vector<bot_config> bots;
  vector<PathPlannerGrid> planners;
  for(int i = 0; i < robotCount; i++)
  {
  	bots.push_back(bot_config(10, 10,130,tp[i]));
  	planners.push_back(PathPlannerGrid(tp[i]));
  }



  int algo_select;
  cout<<"\nSelect the Algorithm\n" 
  "1: BSA-CM (Basic)\n" 
  "2: SSB\n"   
  "3: BoB\n"
  "4: MDFS\n"
  "5: Brick And Mortar\n"
  "6: Boustrophedon Motion With Updated Bactrack Search\n"
  "7: Boustrophedon Motion With BSA_CM like Backtracking\n" 
  "8: S-MSTC\n"
  "9: ANTS\n"
  "\nEnter here: ";
  int bots_in_same_cell = 0;
  cin>>algo_select;


  int repeatedCoverage = 0;
  double total_path_length = 0; // in feets
  int total_iterations = 0;
  double total_completion_time = 0;
  //double total_computation_time = 0;
  double time_to_compute = 0;
  double total_movement_time = 0;
  double start_movement = 0;
  double end_movement = 0;

  double move_straight_time = 2680;//sec x 1000, divide by 10-^8 to get it into system clock range
  double turn_quarter_time = 1496;//sec = 1000, divide by 10-^8 to get it into system clock range

  double final_completion_time = 0;
  bool final_complete = 0;

  double start_t = tic();
  int wait_count = 0;
  int move_count = 0;
  int comm_dist = 5;
  cout<<"Enter the comm_dist: ";
  cin>>comm_dist;
  while (true){    
  	total_iterations++;
    image = imread("../Maps/Basic.png");
  	cvtColor(image, image_gray, cv::COLOR_BGR2GRAY);

   /* if(first_iter){
      bots[0].plan.overlayGrid(testbed.detections,image_gray);//overlay grid completely reintialize the grid, we have to call it once at the beginning only when all robots first seen simultaneously(the surrounding is assumed to be static) not every iteration
      for(int i = 1;i<bots.size();i++){
        bots[i].plan.rcells = bots[0].plan.rcells;
        bots[i].plan.ccells = bots[0].plan.ccells;
      }
     //srand(time(0));
      for(int i = 0; i < bots.size(); i++)
      {
      	int r = rand()%bots[0].plan.rcells;
      	int c = rand()%bots[0].plan.ccells;
      	while((bots[0].plan.isBlocked(r, c)))
      	{
      		r = rand()%bots[0].plan.rcells;
      		c = rand()%bots[0].plan.ccells;
      	}
      	//bots[i].plan.path_points.push_back(pt(r, c));
      	bots[i].plan.addGridCellToPath(r, c, testbed);
      	bots[i].plan.world_grid[r][c].steps = 1;      	
      	bots[i].pose.x = r{
;
      	bots[i].pose.y = c;
      	bots[i].pose.omega = rand()%4;
      	bots[i].plan.current_orient = bots[i].pose.omega;
      	bots[i].plan.robot_id = i;
      	bots[i].plan.robot_tag_id = i;
      }
    }
*/
    if(first_iter){     
     srand(time(0));
      for(int i = 0; i < bots.size(); i++)
      {
      	bots[i].plan.overlayGrid(testbed.detections,image_gray);
      	int r = rand()%bots[i].plan.rcells;
      	int c = rand()%bots[i].plan.ccells;
      	while((bots[i].plan.isBlocked(r, c)))
      	{
      		r = rand()%bots[i].plan.rcells;
      		c = rand()%bots[i].plan.ccells;
      	}
      	//bots[i].plan.path_points.push_back(pt(r, c));
      	bots[i].plan.addGridCellToPath(r, c, testbed);
      	bots[i].plan.world_grid[r][c].steps = 1;      	
      	bots[i].pose.x = r;
      	bots[i].pose.y = c;
      	bots[i].pose.omega = rand()%4;
      	bots[i].plan.current_orient = bots[i].pose.omega;
      	bots[i].plan.robot_id = i;
      	bots[i].plan.robot_tag_id = i;
      	bots[i].plan.comm_dist = comm_dist;//feets
      }
    }


    
 
    for(int i = 0;i<bots.size();i++){      
      planners[i] = bots[i].plan;
    }
    
    double compute_start = tic();
    for(int i = 0;i<bots.size();i++){
      bots[i].plan.wait_to_plan = 0;
      cout<<i<<": ";
      switch(algo_select)
      {
      case 1: bots[i].plan.BSACoverageIncremental(testbed,bots[i].pose, 2.5,planners); break;
      case 2: bots[i].plan.SSB(testbed,bots[i].pose, 2.5,planners); break;      
      case 3: bots[i].plan.BoB(testbed,bots[i].pose, 2.5,planners); break; 
      case 4: bots[i].plan.MDFS(testbed,bots[i].pose, 2.5,planners); break;
      case 5: bots[i].plan.BrickAndMortar(testbed,bots[i].pose, 2.5,planners); break; 
      case 6: bots[i].plan.BoustrophedonMotionWithUpdatedBactrackSelection(testbed,bots[i].pose, 2.5,planners); break;
      case 7: bots[i].plan.BoustrophedonMotionWithBSA_CMlikeBacktracking(testbed,bots[i].pose, 2.5,planners); break;    
      case 8: bots[i].plan.S_MSTC(testbed,bots[i].pose, 2.5,planners); break;
      case 9: bots[i].plan.ANTS(testbed,bots[i].pose, 2.5,planners); break;     
      default: bots[i].plan.BSACoverageIncremental(testbed,bots[i].pose, 2.5,planners);   
      }
      planners[i] = bots[i].plan;    
    } 
    double compute_end  = tic();
    time_to_compute += (compute_end-compute_start);

    vector <pair<double, int>> time_left_to_move(bots.size());
    double time_since_last_movement;
    double current_time = tic();    
	if(!first_iter)
	{
		for(int i = 0; i < bots.size(); i++)
		{	
			bots[i].plan.bot_start_movement=/*tic()*/current_time;
			bots[i].plan.next_target_index = bots[i].plan.index_travelled+1;
        	if((bots[i].plan.next_target_index) < bots[i].plan.path_points.size())
        	{
        	 	bots[i].plan.time_spent_in_computation += (bots[i].plan.bot_start_movement-end_movement);	
				//current_time = tic();
				time_since_last_movement = current_time - bots[i].plan.last_move_time - bots[i].plan.time_spent_in_computation;
				time_left_to_move[i].first = bots[i].plan.wait_time-time_since_last_movement;
				time_left_to_move[i].second = bots[i].plan.robot_tag_id;
				/*cout<<"robot id: "<<bots[i].plan.robot_tag_id<<endl;
		        cout<<"wait time: "<<bots[i].plan.wait_time<<endl;
				cout<<"time since last movement: "<<time_since_last_movement<<endl;	 */
	        }
	        else
	        {
	        	time_left_to_move[i].first = 100000000;
				time_left_to_move[i].second = bots[i].plan.robot_tag_id;
	        }
	        
		}
		
	}

    sort(time_left_to_move.begin(), time_left_to_move.end());
   /* for(int i = 0; i < bots.size(); i++)
    {
    	bots[i].plan.next_target_index = bots[i].plan.index_travelled+1;
    	if((bots[i].plan.next_target_index) < bots[i].plan.path_points.size())
    	{
    		cout<<"time: "<< time_left_to_move[i].first<<" id: "<<time_left_to_move[i].second<<endl;
    	}
    	
    }
*/
      

    /*cout<<"start_movement: "<<start_movement<<endl;
    cout<<"end_movementL: "<<end_movement<<endl;
    cout<<"start_movement - end_movement: "<<start_movement-end_movement<<endl;*/
    // pair <int, int> wheel_velocities;//dummy variable in case of simulation
    // for(int i = 0;i<bots.size();i++){    
    //     bots[i].plan.next_target_index = bots[i].plan.index_travelled+1;
    //     if((bots[i].plan.next_target_index) < bots[i].plan.path_points.size())
    //     {
    //     	if(bots[i].plan.movement_made==1 && !first_iter)
	   //      {
	   //      	cout<<"wait time changed!\n";
	   //      	bots[i].plan.last_orient = bots[i].plan.current_orient;
	   //      	int nx = bots[i].plan.path_points[bots[i].plan.next_target_index].x - bots[i].plan.path_points[bots[i].plan.next_target_index-1].x;
	   //      	int ny = bots[i].plan.path_points[bots[i].plan.next_target_index].y - bots[i].plan.path_points[bots[i].plan.next_target_index-1].y;
	   //      	if(nx==0 && ny==0) bots[i].plan.iter_wait = 0;
	   //      	else if(nx == -1 && ny == 0 )//up
	   //      	{
	   //      		bots[i].plan.current_orient = 0;	        	
	   //      	}
	   //      	else if(nx == 0 && ny == 1)//right
	   //      	{
	   //      		bots[i].plan.current_orient = 1;
	   //      	}
	   //      	else if(nx == 1 && ny == 0)//down
	   //      	{
	   //      		bots[i].plan.current_orient = 2;
	   //      	}
	   //      	else if(nx == 0 && ny == -1)//left
	   //      	{
	   //      		bots[i].plan.current_orient = 3;
	   //      	}
	   //      	if(!(nx==0 && ny==0))
	   //      	{
	   //      		if(abs(bots[i].plan.current_orient - bots[i].plan.last_orient)==0)//moving straight
	   //      		{
	   //      			bots[i].plan.way_to_move = 0;
	   //      			//bots[i].plan.iter_wait = 0 + rand()%3;
	   //      			double rand_delay = rand()%600;
	   //      			rand_delay = 300 - rand_delay;
	   //      			bots[i].plan.path_completion_time += (move_straight_time + rand_delay)/1000;
	   //      			bots[i].plan.wait_time = (move_straight_time + rand_delay)/(10000000);
	   //      		}
	   //      		else if(abs(bots[i].plan.current_orient - bots[i].plan.last_orient)%3==0)//moving 90 degree
	   //      		{
	   //      			bots[i].plan.way_to_move = 1;
	   //      			//bots[i].plan.iter_wait = 3 + rand()%3;
	   //      			double rand_delay_straight = rand()%600;
	   //      			rand_delay_straight = 300 - rand_delay_straight;
	   //      			double rand_delay_turn = rand()%400;
	   //      			rand_delay_turn = 200 - rand_delay_turn;
	   //      			double rand_delay = rand_delay_straight + rand_delay_turn;
	   //      			bots[i].plan.path_completion_time += (move_straight_time + turn_quarter_time+ rand_delay)/1000;
	   //      			bots[i].plan.wait_time = (move_straight_time + turn_quarter_time+ rand_delay)/(10000000);
	   //      		}
	   //      		else if(abs(bots[i].plan.current_orient - bots[i].plan.last_orient)==1)//moving 90 degree
	   //      		{
	   //      			bots[i].plan.way_to_move = 1;
	   //      			double rand_delay_straight = rand()%600;
	   //      			rand_delay_straight = 300 - rand_delay_straight;
	   //      			double rand_delay_turn = rand()%400;
	   //      			rand_delay_turn = 200 - rand_delay_turn;
	   //      			double rand_delay = rand_delay_straight + rand_delay_turn;
	   //      			bots[i].plan.path_completion_time += (move_straight_time + turn_quarter_time+ rand_delay)/1000;
	   //      			bots[i].plan.wait_time = (move_straight_time + turn_quarter_time+ rand_delay)/(10000000);
	   //      			//bots[i].plan.iter_wait = 3 + rand()%3;
	   //      		}
	   //      		else if(abs(bots[i].plan.current_orient - bots[i].plan.last_orient)==2)//moving 180 degree
	   //      		{
	   //      			bots[i].plan.way_to_move = 2;
	   //      			double rand_delay_straight = rand()%600;
	   //      			rand_delay_straight = 300 - rand_delay_straight;
	   //      			double rand_delay_turn = rand()%400;
	   //      			rand_delay_turn = 200 - rand_delay_turn;
	   //      			double rand_delay = rand_delay_straight + rand_delay_turn;
	   //      			bots[i].plan.path_completion_time += (move_straight_time + turn_quarter_time + turn_quarter_time+ rand_delay)/1000;
	   //      			bots[i].plan.wait_time = (move_straight_time + turn_quarter_time+ turn_quarter_time + rand_delay)/(10000000);
	   //      			//bots[i].plan.iter_wait = 6 + rand()%3;
	   //      		}
	   //      	}
	   //      }
	   //      start_movement = tic();
	   //      cout<<"start_movement-bots[i].plan.bot_start_movement: "<<start_movement-bots[i].plan.bot_start_movement<<endl;
	   //      bots[i].plan.time_spent_in_computation += (start_movement-bots[i].plan.bot_start_movement);
	   //      current_time = tic();
	   //      time_since_last_movement = current_time - bots[i].plan.last_move_time - bots[i].plan.time_spent_in_computation;
	   //      cout<<"*******????????????***********\n";
	   //      cout<<"robot id: "<<bots[i].plan.robot_tag_id<<endl;
	   //      cout<<"wait time: "<<bots[i].plan.wait_time<<endl;
	   //      cout<<"current_time: "<<current_time<<endl;
	   //      cout<<"last_move time: "<<bots[i].plan.last_move_time<<endl;
	   //      cout<<"time spent in computation: "<<bots[i].plan.time_spent_in_computation<<endl;
	   //      cout<<"time since last movement: "<<time_since_last_movement<<endl;
	   //      cout<<"*******????????????***********\n";
    //     	if(!check_collision_possibility(testbed, planners, bots, wheel_velocities, i) && time_since_last_movement >= bots[i].plan.wait_time /*&& bots[i].plan.iter_wait <=0!*/) {
    //     		cout<<"Moving to next: \n";
    //     		cout<<"type of movement: "<<endl;
    //     		switch(bots[i].plan.way_to_move)
    //     		{
    //     			case 0: cout<<"straight\n";break;
    //     			case 1: cout<<"turn 90 degree\n";break;
    //     			case 2: cout<<"turn 180 degree\n";break;
    //     		}
    //     		bots[i].plan.index_travelled++;
    //     		bots[i].plan.updateMovementinSimulation(testbed);
    //    			planners[i] = bots[i].plan;
    //     		bots[i].plan.movement_made = 1;
    //     		bots[i].plan.time_spent_in_computation = 0;
    //     		bots[i].plan.last_move_time = tic();
    //     	}
    //     	else{
    //     	//bots[i].plan.iter_wait--; 
    //     	cout<<"Had to wait!\n"<<endl;
    //     	cout<<"type of movement: "<<endl;
    //     	switch(bots[i].plan.way_to_move)
    //     		{
    //     			case 0: cout<<"straight\n";break;
    //     			case 1: cout<<"turn 90 degree\n";break;
    //     			case 2: cout<<"turn 180 degree\n";break;
    //     		}
    //     	bots[i].plan.movement_made = 0;
    //     	}   	
    //     }     
   	// }
   	start_movement = tic();
   	current_time = tic();

   	pair <int, int> wheel_velocities;//dummy variable in case of simulation
    for(int i = 0;i<bots.size();i++){    
        bots[time_left_to_move[i].second].plan.next_target_index = bots[time_left_to_move[i].second].plan.index_travelled+1;
        if((bots[time_left_to_move[i].second].plan.next_target_index) != bots[time_left_to_move[i].second].plan.path_points.size())
        {
        	cout<<"id: "<<bots[time_left_to_move[i].second].plan.robot_tag_id<<endl;
        	if(bots[time_left_to_move[i].second].plan.movement_made==1 && !first_iter)
	        {
	        	//cout<<"wait time changed!\n";
	        	bots[time_left_to_move[i].second].plan.last_orient = bots[time_left_to_move[i].second].plan.current_orient;
	        	int nx = bots[time_left_to_move[i].second].plan.path_points[bots[time_left_to_move[i].second].plan.next_target_index].x - bots[time_left_to_move[i].second].plan.path_points[bots[time_left_to_move[i].second].plan.next_target_index-1].x;
	        	int ny = bots[time_left_to_move[i].second].plan.path_points[bots[time_left_to_move[i].second].plan.next_target_index].y - bots[time_left_to_move[i].second].plan.path_points[bots[time_left_to_move[i].second].plan.next_target_index-1].y;
	        	if(nx==0 && ny==0) bots[time_left_to_move[i].second].plan.iter_wait = 0;
	        	else if(nx == -1 && ny == 0 )//up
	        	{
	        		bots[time_left_to_move[i].second].plan.current_orient = 0;	        	
	        	}
	        	else if(nx == 0 && ny == 1)//right
	        	{
	        		bots[time_left_to_move[i].second].plan.current_orient = 1;
	        	}
	        	else if(nx == 1 && ny == 0)//down
	        	{
	        		bots[time_left_to_move[i].second].plan.current_orient = 2;
	        	}
	        	else if(nx == 0 && ny == -1)//left
	        	{
	        		bots[time_left_to_move[i].second].plan.current_orient = 3;
	        	}
	        	if(!(nx==0 && ny==0))
	        	{
	        		if(abs(bots[time_left_to_move[i].second].plan.current_orient - bots[time_left_to_move[i].second].plan.last_orient)==0)//moving straight
	        		{
	        			bots[time_left_to_move[i].second].plan.way_to_move = 0;
	        			//bots[time_left_to_move[i].second].plan.iter_wait = 0 + rand()%3;
	        			double rand_delay = rand()%600;
	        			rand_delay = 300 - rand_delay;
	        			bots[time_left_to_move[i].second].plan.path_completion_time += (move_straight_time + rand_delay)/1000;
	        			bots[time_left_to_move[i].second].plan.wait_time = (move_straight_time + rand_delay)/(100000000);
	        		}
	        		else if(abs(bots[time_left_to_move[i].second].plan.current_orient - bots[time_left_to_move[i].second].plan.last_orient)%3==0)//moving 90 degree
	        		{
	        			bots[time_left_to_move[i].second].plan.way_to_move = 1;
	        			//bots[time_left_to_move[i].second].plan.iter_wait = 3 + rand()%3;
	        			double rand_delay_straight = rand()%600;
	        			rand_delay_straight = 300 - rand_delay_straight;
	        			double rand_delay_turn = rand()%400;
	        			rand_delay_turn = 200 - rand_delay_turn;
	        			double rand_delay = rand_delay_straight + rand_delay_turn;
	        			bots[time_left_to_move[i].second].plan.path_completion_time += (move_straight_time + turn_quarter_time+ rand_delay)/1000;
	        			bots[time_left_to_move[i].second].plan.wait_time = (move_straight_time + turn_quarter_time+ rand_delay)/(100000000);
	        		}
	        		else if(abs(bots[time_left_to_move[i].second].plan.current_orient - bots[time_left_to_move[i].second].plan.last_orient)==1)//moving 90 degree
	        		{
	        			bots[time_left_to_move[i].second].plan.way_to_move = 1;
	        			double rand_delay_straight = rand()%600;
	        			rand_delay_straight = 300 - rand_delay_straight;
	        			double rand_delay_turn = rand()%400;
	        			rand_delay_turn = 200 - rand_delay_turn;
	        			double rand_delay = rand_delay_straight + rand_delay_turn;
	        			bots[time_left_to_move[i].second].plan.path_completion_time += (move_straight_time + turn_quarter_time+ rand_delay)/1000;
	        			bots[time_left_to_move[i].second].plan.wait_time = (move_straight_time + turn_quarter_time+ rand_delay)/(100000000);
	        			//bots[time_left_to_move[i].second].plan.iter_wait = 3 + rand()%3;
	        		}
	        		else if(abs(bots[time_left_to_move[i].second].plan.current_orient - bots[time_left_to_move[i].second].plan.last_orient)==2)//moving 180 degree
	        		{
	        			bots[time_left_to_move[i].second].plan.way_to_move = 2;
	        			double rand_delay_straight = rand()%600;
	        			rand_delay_straight = 300 - rand_delay_straight;
	        			double rand_delay_turn = rand()%400;
	        			rand_delay_turn = 200 - rand_delay_turn;
	        			double rand_delay = rand_delay_straight + rand_delay_turn;
	        			bots[time_left_to_move[i].second].plan.path_completion_time += (move_straight_time + turn_quarter_time + turn_quarter_time+ rand_delay)/1000;
	        			bots[time_left_to_move[i].second].plan.wait_time = (move_straight_time + turn_quarter_time+ turn_quarter_time + rand_delay)/(100000000);
	        			//bots[time_left_to_move[i].second].plan.iter_wait = 6 + rand()%3;
	        		}
	        	}
	        }
	        //start_movement = tic();
	        //cout<<"start_movement-bots[time_left_to_move[i].second].plan.bot_start_movement: "<<start_movement-bots[time_left_to_move[i].second].plan.bot_start_movement<<endl;
	        bots[time_left_to_move[i].second].plan.time_spent_in_computation += (start_movement-bots[time_left_to_move[i].second].plan.bot_start_movement);
	        //current_time = tic();
	        time_since_last_movement = current_time - bots[time_left_to_move[i].second].plan.last_move_time - bots[time_left_to_move[i].second].plan.time_spent_in_computation;
	        //commenting following lines make the bots run slow, I don't know why?
	        //cout<<"*******????????????***********\n";
	        //cout<<"robot id: "<<bots[time_left_to_move[i].second].plan.robot_tag_id<<endl;
	        /*cout<<"wait time: "<<bots[time_left_to_move[i].second].plan.wait_time<<endl;
	        cout<<"current_time: "<<current_time<<endl;
	        cout<<"last_move time: "<<bots[time_left_to_move[i].second].plan.last_move_time<<endl;
	        cout<<"time spent in computation: "<<bots[time_left_to_move[i].second].plan.time_spent_in_computation<<endl;
	        cout<<"time since last movement: "<<time_since_last_movement<<endl;
	        cout<<"*******????????????***********\n";*/
        	//if((time_since_last_movement >= bots[time_left_to_move[i].second].plan.wait_time) && !check_collision_possibility(testbed, planners, bots, wheel_velocities, time_left_to_move[i].second) /*&& bots[time_left_to_move[i].second].plan.iter_wait <=0!*/) {
        	if(1) {
        		//cout<<"Moving to next: \n";
        		move_count++;
        		//cout<<"type of movement: "<<endl;
        		/*switch(bots[time_left_to_move[i].second].plan.way_to_move)
        		{
        			case 0: cout<<"straight\n";break;
        			case 1: cout<<"turn 90 degree\n";break;
        			case 2: cout<<"turn 180 degree\n";break;
        		}*/
        		bots[time_left_to_move[i].second].plan.index_travelled++;
        		//bots[time_left_to_move[i].second].plan.updateMovementinSimulation(testbed);
       			planners[time_left_to_move[i].second] = bots[time_left_to_move[i].second].plan;
        		bots[time_left_to_move[i].second].plan.movement_made = 1;
        		bots[time_left_to_move[i].second].plan.time_spent_in_computation = 0;
        		//bots[time_left_to_move[i].second].plan.last_move_time = tic();
        	}
        	else{
	        	//bots[time_left_to_move[i].second].plan.iter_wait--; 
	        	//cout<<"Had to wait!\n"<<endl;
	        	wait_count++;
	        	/*cout<<"type of movement: "<<endl;
	        	switch(bots[time_left_to_move[i].second].plan.way_to_move)
	        		{
	        			case 0: cout<<"straight\n";break;
	        			case 1: cout<<"turn 90 degree\n";break;
	        			case 2: cout<<"turn 180 degree\n";break;
	        		}*/
	        	bots[time_left_to_move[i].second].plan.movement_made = 0;
        	}        	
        }    
   	}
   /*
   	for(int i = 0; i < bots.size(); i++)
	{
	    
	    if(bots[i].plan.movement_made==1)
		{
		   bots[i].plan.last_move_time = tic();
		}
	      		
	}*/
   	
   	
   	end_movement = tic();
   	for(int i = 0; i < bots.size(); i++)
	{	    
	    if(bots[i].plan.movement_made==1)
		{
		   bots[i].plan.last_move_time = end_movement;
		}
	      		
	}
	
   	//cout<<"end_movement: "<<end_movement<<endl;
   	//total_movement_time += (end_movement-start_movement);
   	//cout<<"end - start "<<end_movement-start_movement<<endl;

   	//cv::waitKey(0);

    
    bots[0].plan.drawGrid(image, planners);
   
   	for(int i = 0;i<bots.size();i++){      	
        bots[i].plan.drawPath(image);        
    }

    for(int i = 0; i < bots.size(); i++)
    {
    	bots[i].plan.drawRobot(image);
    }
      //add a next point circle draw for visualisation
      //add a only shortest path invocation drawing function in pathplanners
      //correct next point by index to consider reach radius to determine the next point
    imshow(windowName,image);
    //cv::waitKey(0);
   for(int i = 0; i < bots.size()-1; i++)
    {
    	for(int j=i+1; j < bots.size(); j++)
    	{
    		if(bots[i].plan.path_points[bots[i].plan.index_travelled].x == bots[j].plan.path_points[bots[j].plan.index_travelled].x)
    		{
    			if(bots[i].plan.path_points[bots[i].plan.index_travelled].y == bots[j].plan.path_points[bots[j].plan.index_travelled].y)
    			{
    				cout<<"bots in same cell!\n";
    				cout<<"i, j: "<<i<<" "<<j<<endl;
    				cout<<"r,c: "<<bots[i].plan.path_points[bots[i].plan.index_travelled].x<<" "<<bots[i].plan.path_points[bots[i].plan.index_travelled].y<<endl;
    				bots_in_same_cell = 1;
    			}
    		}
    	}
    }

	    

	    //if(bots_in_same_cell) cv::waitKey(0);
	    bots_in_same_cell = 0;
	    bool completed = 1;
	    for(int i = 0; i < bots.size(); i++)
	    {
	    	if(bots[i].plan.path_points.size()!=(bots[i].plan.next_target_index))
	    	{
	    		completed = 0;
	    		break;
	    	}
	    }
	    if(!first_iter && completed == 1)
	    {
	    	cout<<"Coverage Completed!\n";
	    	break;
	    }

	    if(first_iter)
	    {
	     	first_iter = 0;
	    }
	    if (cv::waitKey(1) == 27){
	        break;//until escape is pressed
	    }
  }//while
  double end_t = tic();
  imshow(windowName,image);

  bool succesful_termination = 1;
  int empty_cells = 0;
  int covered_cells = 0;
  for(int i = 0; i < bots[0].plan.rcells; i++)
  {
    for(int j = 0; j < bots[0].plan.ccells; j++)
    {
    	if(bots[0].plan.isEmpty(i,j))
        {
            empty_cells++;
        }
    }    
  }

  

  cout<<"***********************\n***************\n";
    	int min_length = 100000000;
    	int max_length = 0;
    	for(int i = 0; i < bots.size(); i++)
    	{
    		if(bots[i].plan.path_points.size()<min_length)
    		{
    			min_length = bots[i].plan.path_points.size();
    		}
    		if(bots[i].plan.path_points.size() > max_length)
    		{
    			max_length = bots[i].plan.path_points.size();
    		}
    		cout<<"1: "<<bots[i].plan.path_points.size()<<endl;
    		cout<<"2: "<<max_length<<endl;
    	
    		cout<<"id: "<<bots[i].plan.robot_tag_id<<endl;
    		cout<<"path points size(): "<<bots[i].plan.path_points.size()<<endl;
    		cout<<"index_travelled: "<<bots[i].plan.index_travelled<<endl;
    		cout<<"next_target_index: "<<bots[i].plan.next_target_index<<endl;
    		cout<<"current points: "<<bots[i].plan.path_points[bots[i].plan.index_travelled].x<<" "<<bots[i].plan.path_points[bots[i].plan.index_travelled].y<<endl;
    	}
    	cout<<"max: "<<max_length<<endl;
    	cout<<"min: "<<min_length<<endl;
    	double path_length_range = max_length-min_length;

    cout<<"Number of times it moved: "<<move_count<<endl;
    cout<<"Number of times is waited: "<<wait_count<<endl;
	vector <vector<int>> coverage(bots[0].plan.rcells);
	for(int i = 0; i < bots[0].plan.rcells; i++)
	{
		coverage[i].resize(bots[0].plan.ccells);
	}
	for(int i = 0; i < bots.size(); i++)
	{
		total_path_length+= bots[i].plan.path_points.size();
		for(int j = 0; j < bots[i].plan.path_points.size(); j++)
		{
			coverage[bots[i].plan.path_points[j].x][bots[i].plan.path_points[j].y]++;
			if(coverage[bots[i].plan.path_points[j].x][bots[i].plan.path_points[j].y] > 1)
			{
				repeatedCoverage++;
			}
			else
			{
				covered_cells++;
			}
		}
	}
	if(covered_cells!=empty_cells)
	{
		succesful_termination = 0;
	}
	  if(succesful_termination!=1)
	  {
	  	cout<<"NOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\n";
	  }
	  else
	  {
	  	cout<<"*******************\nSuccesful Termination!\n*******************\n";
	  }
	//total_completion_time = time_to_compute + total_movement_time;
	double complete_process = end_t - start_t;
	total_movement_time = complete_process - time_to_compute;
	double max_time = -1;
	for(int i = 0; i < bots.size();i++)
	{
		cout<<i<<" :path_completion_time:"<<bots[i].plan.path_completion_time<<endl;
		if(bots[i].plan.path_completion_time > max_time)
		{
			max_time = bots[i].plan.path_completion_time;
		}
	}
	double termination_time = max_time + time_to_compute;
	double cumulative_idle_time = 0;
	for(int i = 0; i < bots.size();i++)
	{
		cumulative_idle_time += (termination_time-bots[i].plan.path_completion_time);
	}
	double mean_idle_time;
	cout<<"cumulative_idle_time: "<<cumulative_idle_time<<endl;
	mean_idle_time = cumulative_idle_time/bots.size();
	double mean_path_length = total_path_length/bots.size();

	double percent_mean_idle_time = (mean_idle_time/termination_time)*100;

	cout<<"***************************\n";
	cout<<"Results: "<<endl;
	cout<<"empty_cells: "<<empty_cells<<endl;
	cout<<"covered_cells: "<<covered_cells<<endl;
	cout<<"total_iterations: "<<total_iterations<<endl;
	cout<<"total_path_length: "<<(total_path_length/2)<<" ft."<<endl;//1 gird cell is 1/2 feets
	cout<<"repeatedCoverage: "<<repeatedCoverage<<endl;
	cout<<"Total Computation Time: "<<time_to_compute<<" sec."<<endl;	
	cout<<"termination_time: "<<termination_time<<" sec."<<endl;
	cout<<"Mean idle time: "<<mean_idle_time<<" sec."<<endl;
	cout<<"Mean idle time as a percent of termination_time: "<<percent_mean_idle_time<<"%"<<endl;
	cout<<"path_legth_range (Max - Min): "<<path_length_range/2<<" ft."<<endl;
	cout<<"Mean path length: "<<mean_path_length/2<<" ft."<<endl;
	cout<<"FInal Compltetion time: "<<final_completion_time<<endl;
	cout<<"***************************\n";

	if(succesful_termination!=1)
	  {
	  	cout<<"NOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\nNOT FULLY COVERED!\n";
	  }
	  else
	  {
	  	cout<<"*******************\nSuccesful Termination!\n*******************\n";
	  }
	 
    cv::waitKey(0);
  return 0;
}
